name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write    # Required for creating releases
  packages: write    # Required for publishing packages

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'
    
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Build and Pack
        run: |
          dotnet build src/Flurl.Cmdlets/Flurl.Cmdlets.csproj -c Release -p:Version=${{ steps.gitversion.outputs.semVer }}
          dotnet pack src/Flurl.Cmdlets/Flurl.Cmdlets.csproj -c Release -p:Version=${{ steps.gitversion.outputs.semVer }} --output artifacts
      
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./artifacts/*.nupkg
          retention-days: 5

  test:
    name: Test (${{ matrix.os }})
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Extract Module
        shell: pwsh
        run: |
          $nupkg = Get-ChildItem ./artifacts/*.nupkg
          $extractPath = Join-Path ./artifacts 'Flurl'
          Expand-Archive -Path $nupkg -DestinationPath $extractPath
          Write-Host "Extracted module to: $extractPath"
      
      - name: Install Pester
        shell: pwsh
        run: |
          Install-Module Pester -Force -Scope CurrentUser
          
      - name: Run Tests
        shell: pwsh
        run: |
          Import-Module Pester -Force -PassThru
          Import-Module ./artifacts/Flurl/Flurl.psd1 -Force -Verbose
          $config = [PesterConfiguration]::Default
          $config.Run.Path = './Flurl.Tests.ps1'
          $config.Output.Verbosity = 'Detailed'
          $config.Run.PassThru = $true
          Invoke-Pester -Configuration $config
          
  publish:
    name: Publish
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: artifacts

      - name: Create Release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $nupkg = Get-ChildItem ./artifacts/Flurl.Cmdlets.*.nupkg
          $version = $nupgk.BaseName -replace 'Flurl\.Cmdlets\.'
          Write-Host "Version: $version"
          $secureToken = $env:GH_TOKEN | ConvertTo-SecureString -AsPlainText -Force
          $releaseParams = @{
              Authentication = 'Bearer'
              Body           = @{
                  tag_name   = "v$version"
                  name       = "v$version"
                  body       = "Release v$version"
                  draft      = $false
                  prerelease = $false
              } | ConvertTo-Json
              ContentType    = 'application/json'
              Headers        = @{ Accept = 'application/vnd.github.v3+json' }
              Method         = 'POST'
              Token          = $secureToken
              Uri            = 'https://api.github.com/repos/${{ github.repository }}/releases'
          }
          $release = Invoke-RestMethod @releaseParams
          # Upload asset
          $assetParams = @{
              Authentication = 'Bearer'
              ContentType    = 'application/octet-stream'
              Headers        = @{ Accept = 'application/vnd.github.v3+json' }
              InFile         = $nupkg.FullName
              Method         = 'POST'
              Token          = $secureToken
              Uri            = $release.upload_url -replace '\{\?.*\}',"?name=$($nupkg.Name)"
          }
          Invoke-RestMethod @assetParams
          
      - name: Publish to PowerShell Gallery
        env:
          NUGET_KEY: ${{ secrets.POWERSHELLGALLERY_API_KEY }}
        run: |
          dotnet nuget push ./artifacts/*.nupkg --api-key ${{ env.NUGET_KEY }} --source https://www.powershellgallery.com/api/v2/package